#include "fintrf.h"

! standard header for mex functions
subroutine mexfunction(nlhs, plhs, nrhs, prhs)
use utils
use chebyshev
implicit double precision (a-h,o-z)

! number of input arguments, number of output arguments
integer      :: nlhs, nrhs  
! pointer to inputs and outputs
mwPointer    :: plhs(*), prhs(*) 
! get some of the matlab mex functions
mwPointer    :: mxGetPr, mxGetPi, mxCreateDoubleMatrix 
! define a size integer so that we can get its type
mwSize       :: n

type(chebexps_data)           :: chebdata
real*8, allocatable :: c(:),twhts(:),ab(:,:)
complex*16, allocatable :: r(:)
real*8, allocatable :: psivals(:),avals(:)
real*8, allocatable :: ts(:),avals0(:),psivals0(:)
real*8, allocatable :: psival(:,:),aval(:,:),avals1(:),psivals1(:)
integer it
real*8 da,db

da=-0.5d0
db=-0.5d0

n = mxGetM(prhs(1))

if (n .lt. (2**12-1)) then
it = 9
else 
it = 27
end if

allocate(c((n-it)**2),r(n**2),ts(n),twhts(n))
allocate(avals0(n),psivals0(n),avals1(n),psivals1(n))

call mxCopyPtrToReal8(mxGetPr(prhs(2)),c,(n-it)**2)

call jacobi_quad_mod(n,da,db,ts,twhts)

k  = 16
call chebexps(k,chebdata)

dd      = nts*1.0d0
dd      = min(0.10d0,1/dd)
dd      = log(dd)/log(2.0d0)
nints   = ceiling(-dd)+1
nints   = 2*nints
allocate(ab(2,nints))

call jacobi_phase_disc(nints,ab)

allocate(psivals(k*nints),avals(k*nints))
allocate(psival(k*nints,n-it),aval(k*nints,n-it))

do i=it,n-1
dnu = i
call jacobi_phase(chebdata,dnu,da,db,nints,ab,avals,psivals)
psival(:,i-it+1) = psivals
aval(:,i-it+1) = avals
end do

r=0
do i=it,n-1
dnu = i
call jacobi_phase_eval(chebdata,dnu,da,db,nints,ab,aval(:,i-it+1),psival(:,i-it+1),n,ts,avals0,psivals0)
   do j=it,n-1
      dnu1 = j
      call jacobi_phase_eval(chebdata,dnu1,da,db,nints,ab,aval(:,j-it+1),psival(:,j-it+1),n,ts,avals1,psivals1)
      do k=1,n
         r((k-1)*n+1:k*n)=avals0(k)*exp(dcmplx(0,1)*psivals0(k))*avals1*exp(dcmplx(0,1)*psivals1)*c(j-it+1+(i-it)*(n-it))+r((k-1)*n+1:k*n)
   end do
end do

plhs(1) = mxCreateDoubleMatrix(n**2, 1, 1)
call mxCopyComplex16ToPtr(r, mxGetPr(plhs(1)),mxGetPi(plhs(1)),n**2)
deallocate(c,twhts,ts,ab,r,psivals,avals,psivals0,avals0,psival,aval,avals1,psivals1)


end subroutine